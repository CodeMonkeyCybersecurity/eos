job "{{ app_name }}" {
  datacenters = ["{{ minio.get('datacenter', 'dc1') }}"]
  type        = "service"
  
  # Update policy for zero-downtime deployments
  update {
    max_parallel      = 1
    min_healthy_time  = "30s"
    healthy_deadline  = "5m"
    progress_deadline = "10m"
    auto_revert       = true
    canary            = 1
  }
  
  # Prevent automatic rescheduling during maintenance
  reschedule {
    attempts  = 3
    interval  = "30m"
    delay     = "30s"
    delay_function = "exponential"
    max_delay = "1h"
    unlimited = false
  }

  group "minio" {
    count = 1
    
    # Resource allocation from pillar
    constraint {
      attribute = "${attr.kernel.name}"
      value     = "linux"
    }
    
    # Volume configuration based on storage type
    {% if minio.get('use_cephfs', false) %}
    volume "minio-storage" {
      type      = "csi"
      source    = "{{ minio.get('cephfs_volume', 'cephfs-minio') }}"
      read_only = false
      
      mount_options {
        fs_type = "ceph"
        mount_flags = ["noatime", "nodiratime"]
      }
    }
    {% else %}
    volume "minio-storage" {
      type      = "host"
      source    = "minio-data-{{ app_name }}"
      read_only = false
    }
    {% endif %}

    network {
      mode = "host"
      port "api" {
        static = {{ minio.get('api_port', 9123) }}
      }
      port "console" {
        static = {{ minio.get('console_port', 8123) }}
      }
    }

    task "minio" {
      driver = "docker"
      
      # User for security
      user = "1000:1000"

      config {
        image = "minio/minio:{{ minio.get('version', 'latest') }}"
        ports = ["api", "console"]
        args = [
          "server",
          "/data",
          "--console-address", ":${NOMAD_PORT_console}"
        ]
        
        # Mount configuration
        volumes = [
          "local/config:/root/.minio"
        ]
        
        # Security options
        cap_drop = ["ALL"]
        cap_add  = ["DAC_OVERRIDE", "SETUID", "SETGID"]
        
        # Logging configuration
        logging {
          type = "json-file"
          config {
            max-size = "10m"
            max-file = "3"
          }
        }
      }

      volume_mount {
        volume      = "minio-storage"
        destination = "/data"
        read_only   = false
      }
      
      # Environment configuration
      env {
        MINIO_PROMETHEUS_URL    = "http://prometheus.service.consul:9090"
        MINIO_PROMETHEUS_JOB_ID = "{{ app_name }}"
        MINIO_BROWSER_REDIRECT_URL = "http://${NOMAD_IP_console}:${NOMAD_PORT_console}"
        MINIO_UPDATE = "off"  # Disable auto-updates in production
      }

      # Vault integration for credentials
      {% if not minio.get('skip_vault', false) %}
      vault {
        policies = ["{{ minio.get('vault_policy', 'minio-policy') }}"]
        change_mode = "restart"
      }
      
      template {
        data = <<EOF
{{- with secret "{{ minio.get('vault_path', 'kv/minio/' + app_name) }}" -}}
MINIO_ROOT_USER={{ .Data.data.MINIO_ROOT_USER }}
MINIO_ROOT_PASSWORD={{ .Data.data.MINIO_ROOT_PASSWORD }}
{{- else -}}
# Vault unavailable - using defaults (CHANGE IMMEDIATELY!)
MINIO_ROOT_USER=minioadmin
MINIO_ROOT_PASSWORD=minioadmin
{{- end -}}
EOF
        destination = "secrets/env"
        env         = true
      }
      {% else %}
      # Degraded mode - credentials from Consul
      template {
        data = <<EOF
{{ with key "minio/{{ app_name }}/root_user" }}MINIO_ROOT_USER={{ . }}{{ end }}
{{ with key "minio/{{ app_name }}/root_password" }}MINIO_ROOT_PASSWORD={{ . }}{{ end }}
EOF
        destination = "secrets/env"
        env         = true
      }
      {% endif %}

      # Resources
      resources {
        cpu    = {{ minio.get('cpu_limit', 500) }}
        memory = {{ minio.get('memory_limit', 1024) }}
        
        # Reserve resources to prevent overcommit
        memory_max = {{ minio.get('memory_limit', 1024) * 2 }}
      }

      # Service registration handled by Terraform
      service {
        name = "{{ app_name }}"
        port = "api"
        tags = {{ minio.get('consul_tags', ['minio', 'api', 's3']) | tojson }}
        
        check {
          type     = "http"
          path     = "/minio/health/live"
          interval = "{{ minio.get('health_check_interval', '30s') }}"
          timeout  = "{{ minio.get('health_check_timeout', '5s') }}"
          
          # Extended startup time for initial deployment
          check_restart {
            limit = 5
            grace = "120s"
          }
        }
        
        meta {
          prometheus_port = "${NOMAD_PORT_api}"
          prometheus_path = "/minio/v2/metrics/cluster"
        }
      }

      service {
        name = "{{ app_name }}-console"
        port = "console"
        tags = {{ (minio.get('consul_tags', ['minio', 'console', 'ui']) + ['console']) | tojson }}
        
        check {
          type     = "http"
          path     = "/"
          interval = "{{ minio.get('health_check_interval', '30s') }}"
          timeout  = "{{ minio.get('health_check_timeout', '5s') }}"
        }
      }
      
      # Restart policy
      restart {
        attempts = 3
        interval = "5m"
        delay    = "30s"
        mode     = "delay"
      }
      
      # Kill timeout for graceful shutdown
      kill_timeout = "30s"
    }
  }
}