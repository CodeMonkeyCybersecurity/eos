job "helen-{{ mode }}-{{ environment }}" {
  datacenters = ["dc1"]
  type = "service"
  namespace = "{{ namespace }}"
  
  # Update strategy for blue-green deployments
  update {
    max_parallel      = 1
    min_healthy_time  = "60s"
    healthy_deadline  = "10m"
    progress_deadline = "15m"
    auto_revert       = true
    auto_promote      = true
    canary           = 1
    
    # Stagger updates for multiple instances
    stagger = "30s"
  }

  # Ensure appropriate node placement
  constraint {
    attribute = "${attr.kernel.name}"
    value     = "linux"
  }

  # Prefer nodes with SSD storage for better performance
  affinity {
    attribute = "${node.disk.type}"
    value     = "ssd"
    weight    = 50
  }

  group "helen-ghost" {
    count = {{ instance_count }}

    # Spread instances across nodes for HA
    spread {
      attribute = "${node.unique.id}"
      weight    = 100
    }

    # Restart policy
    restart {
      interval = "10m"
      attempts = 3
      delay    = "30s"
      mode     = "delay"
    }

    # Persistent volumes for Ghost
    volume "ghost-content" {
      type      = "host"
      read_only = false
      source    = "helen-content-{{ environment }}"
    }

    volume "ghost-data" {
      type      = "host"
      read_only = false
      source    = "helen-data-{{ environment }}"
    }

    # Ephemeral disk for temporary files
    ephemeral_disk {
      size    = 1000  # 1GB
      migrate = true
      sticky  = true
    }

    network {
      mode = "bridge"
      
      port "http" {
        static = {{ port }}
        to     = 2368  # Ghost default port
      }
    }

    # Service registration
    service {
      name = "helen-{{ mode }}-{{ environment }}"
      port = "http"
      
      tags = [
        "helen",
        "ghost",
        "cms",
        "{{ environment }}",
        "domain:{{ domain }}",
        "version:{{ git_commit }}",
        {% if enable_auth %}
        "auth-enabled",
        {% endif %}
        "database:{{ database }}"
      ]

      # Health checks
      check {
        type     = "http"
        path     = "/ghost/api/admin/site/"
        interval = "10s"
        timeout  = "5s"
        
        check_restart {
          limit = 3
          grace = "2m"
          ignore_warnings = true
        }
      }

      check {
        type     = "tcp"
        interval = "10s"
        timeout  = "2s"
      }

      # Connect sidecar for service mesh
      connect {
        sidecar_service {
          proxy {
            {% if database == "mysql" %}
            upstreams {
              destination_name = "mysql"
              local_bind_port  = 3306
            }
            {% endif %}
            
            # Optional Redis for caching
            {% if enable_redis|default(false) %}
            upstreams {
              destination_name = "redis"
              local_bind_port  = 6379
            }
            {% endif %}
          }
        }
      }
    }

    # Database migration task (runs before main task)
    {% if database == "mysql" %}
    task "db-migrate" {
      driver = "docker"
      
      lifecycle {
        hook    = "prestart"
        sidecar = false
      }

      config {
        image = "{{ docker_image }}"
        command = "node"
        args = [
          "node_modules/ghost-cli/bin/ghost",
          "migrate"
        ]
      }

      template {
        destination = "secrets/env"
        env         = true
        data        = <<EOH
# Ghost environment
NODE_ENV=production
url=https://{{ domain }}

# Database configuration from Vault
{{ with secret "kv/data/helen/{{ environment }}/database" }}
database__client={{ .Data.data.client }}
database__connection__host={{ .Data.data.host }}
database__connection__port={{ .Data.data.port }}
database__connection__user={{ .Data.data.user }}
database__connection__password={{ .Data.data.password }}
database__connection__database={{ .Data.data.database }}
{{ end }}
EOH
      }

      resources {
        cpu    = 200
        memory = 256
      }
      
      # Don't restart on failure - migrations should only run once
      restart {
        attempts = 0
      }
    }
    {% endif %}

    # Main Ghost task
    task "ghost" {
      driver = "docker"

      # Volume mounts
      volume_mount {
        volume      = "ghost-content"
        destination = "/var/lib/ghost/content"
        read_only   = false
      }

      volume_mount {
        volume      = "ghost-data"
        destination = "/var/lib/ghost/data"
        read_only   = false
      }

      config {
        image = "{{ docker_image }}"
        ports = ["http"]
        
        # Run as ghost user (UID 1000)
        user = "1000:1000"
        
        # Labels for container management
        labels {
          service     = "helen"
          environment = "{{ environment }}"
          mode        = "ghost"
          version     = "{{ git_commit }}"
        }

        # Health check command
        healthchecks {
          disable = false
        }

        # Mount custom configuration if provided
        {% if custom_config|default(false) %}
        mount {
          type   = "bind"
          source = "local/config.production.json"
          target = "/var/lib/ghost/config.production.json"
          readonly = true
        }
        {% endif %}
      }

      # Ghost configuration via environment variables
      template {
        destination = "secrets/env"
        env         = true
        change_mode = "restart"
        data        = <<EOH
# Core Ghost configuration
NODE_ENV=production
url=https://{{ domain }}
server__host=0.0.0.0
server__port=2368

# Database configuration from Vault
{{ with secret "kv/data/helen/{{ environment }}/database" }}
database__client={{ .Data.data.client }}
{{ if eq .Data.data.client "mysql" }}
database__connection__host={{ .Data.data.host }}
database__connection__port={{ .Data.data.port }}
database__connection__user={{ .Data.data.user }}
database__connection__password={{ .Data.data.password }}
database__connection__database={{ .Data.data.database }}
database__connection__charset=utf8mb4
{{ else }}
database__connection__filename=/var/lib/ghost/data/ghost.db
{{ end }}
{{ end }}

# Mail configuration from Vault
{{ with secret "kv/data/helen/{{ environment }}/mail" }}
{{ if .Data.data.host }}
mail__transport=SMTP
mail__options__service=SMTP
mail__options__host={{ .Data.data.host }}
mail__options__port={{ .Data.data.port }}
mail__options__secure={{ .Data.data.secure }}
{{ if .Data.data.user }}
mail__options__auth__user={{ .Data.data.user }}
mail__options__auth__pass={{ .Data.data.password }}
{{ end }}
mail__from={{ .Data.data.from }}
{{ else }}
mail__transport=Direct
{{ end }}
{{ end }}

# S3 storage configuration (optional)
{{ with secret "kv/data/helen/{{ environment }}/s3" }}
{{ if .Data.data.bucket }}
storage__active=s3
storage__s3__accessKeyId={{ .Data.data.access_key }}
storage__s3__secretAccessKey={{ .Data.data.secret_key }}
storage__s3__bucket={{ .Data.data.bucket }}
storage__s3__region={{ .Data.data.region }}
{{ if .Data.data.asset_host }}
storage__s3__assetHost={{ .Data.data.asset_host }}
{{ end }}
{{ end }}
{{ end }}

# Redis caching (optional)
{% if enable_redis|default(false) %}
{{ range service "redis" }}
caching__redis__host={{ .Address }}
caching__redis__port={{ .Port }}
{{ end }}
caching__imageSizes=true
caching__pages=true
{% endif %}

# Privacy and telemetry
privacy__useUpdateCheck=false
privacy__useGravatar=false
privacy__useRpcPing=false
privacy__useStructuredData=true

# Logging configuration
logging__level=info
logging__transports=["stdout"]
logging__rotation=false

# Process configuration
process__systemd=false
process__name=ghost-{{ environment }}

# Path configuration
paths__contentPath=/var/lib/ghost/content

# Admin panel configuration
admin__redirects=true

# Image optimization
imageOptimization__resize=true
imageOptimization__srcsets=true

# Compression
compress=true

# Security headers
securityHeaders=true

# Trust proxy headers from Caddy
trustedProxies=true

# Additional configuration
{{ range $key, $value := key (printf "helen/%s/env" environment) | parseJSON }}
{{ $key }}={{ $value }}
{{ end }}
EOH
      }

      # Custom configuration file (optional)
      {% if custom_config|default(false) %}
      template {
        destination = "local/config.production.json"
        change_mode = "restart"
        data        = <<EOH
{
  "url": "https://{{ domain }}",
  "server": {
    "port": 2368,
    "host": "0.0.0.0"
  },
  "database": {
{{ with secret "kv/data/helen/{{ environment }}/database" }}
    "client": "{{ .Data.data.client }}",
{{ if eq .Data.data.client "mysql" }}
    "connection": {
      "host": "{{ .Data.data.host }}",
      "port": {{ .Data.data.port }},
      "user": "{{ .Data.data.user }}",
      "password": "{{ .Data.data.password }}",
      "database": "{{ .Data.data.database }}",
      "charset": "utf8mb4"
    }
{{ else }}
    "connection": {
      "filename": "/var/lib/ghost/data/ghost.db"
    }
{{ end }}
{{ end }}
  },
  "mail": {
{{ with secret "kv/data/helen/{{ environment }}/mail" }}
{{ if .Data.data.host }}
    "transport": "SMTP",
    "options": {
      "host": "{{ .Data.data.host }}",
      "port": {{ .Data.data.port }},
      "secure": {{ .Data.data.secure }},
{{ if .Data.data.user }}
      "auth": {
        "user": "{{ .Data.data.user }}",
        "pass": "{{ .Data.data.password }}"
      },
{{ end }}
      "from": "{{ .Data.data.from }}"
    }
{{ else }}
    "transport": "Direct"
{{ end }}
{{ end }}
  },
  "logging": {
    "level": "info",
    "transports": ["stdout"],
    "rotation": false
  },
  "paths": {
    "contentPath": "/var/lib/ghost/content"
  },
  "privacy": {
    "useUpdateCheck": false,
    "useGravatar": false,
    "useRpcPing": false,
    "useStructuredData": true
  },
  "imageOptimization": {
    "resize": true,
    "srcsets": true
  },
  "compress": true,
  "preloadHeaders": true
}
EOH
      }
      {% endif %}

      # Resources
      resources {
        cpu    = {{ cpu }}
        memory = {{ memory }}
        
        # Allow memory to burst for image processing
        memory_max = {{ memory * 2 }}
      }

      # Environment variables
      env {
        # Ghost needs to know it's behind a proxy
        TRUST_PROXY = "true"
        
        # Node.js settings
        NODE_OPTIONS = "--max-old-space-size={{ memory - 128 }}"
        
        # Custom environment variables
        GHOST_ENVIRONMENT = "{{ environment }}"
        HELEN_VERSION = "{{ git_commit }}"
      }

      # Kill timeout for graceful shutdown
      kill_timeout = "30s"

      # Logging
      logs {
        max_files     = 10
        max_file_size = 10
      }
    }

    # Backup task (runs as sidecar)
    {% if backup_enabled|default(true) %}
    task "backup" {
      driver = "docker"
      
      lifecycle {
        hook    = "poststart"
        sidecar = true
      }

      volume_mount {
        volume      = "ghost-content"
        destination = "/content"
        read_only   = true
      }

      volume_mount {
        volume      = "ghost-data"
        destination = "/data"
        read_only   = true
      }

      config {
        image   = "alpine:latest"
        command = "/local/backup.sh"
        
        # Run as same user as Ghost
        user = "1000:1000"
      }

      template {
        destination = "local/backup.sh"
        perms       = "755"
        data        = <<EOH
#!/bin/sh
# Helen Ghost backup script

BACKUP_INTERVAL={{ backup_interval|default(86400) }}
BACKUP_RETENTION={{ backup_retention|default(7) }}

while true; do
  echo "Starting backup at $(date)"
  
  # Create backup directory
  BACKUP_DIR="/alloc/data/backups"
  mkdir -p "$BACKUP_DIR"
  
  TIMESTAMP=$(date +%Y%m%d_%H%M%S)
  
  # Backup content
  tar -czf "$BACKUP_DIR/content_$TIMESTAMP.tar.gz" -C /content .
  
  # Backup data (SQLite)
  {% if database == "sqlite" %}
  cp /data/ghost.db "$BACKUP_DIR/ghost_$TIMESTAMP.db"
  {% endif %}
  
  # Clean up old backups
  find "$BACKUP_DIR" -name "*.tar.gz" -mtime +$BACKUP_RETENTION -delete
  find "$BACKUP_DIR" -name "*.db" -mtime +$BACKUP_RETENTION -delete
  
  echo "Backup completed at $(date)"
  
  # Sleep until next backup
  sleep $BACKUP_INTERVAL
done
EOH
      }

      template {
        destination = "secrets/backup-env"
        env         = true
        data        = <<EOH
{{ with secret "kv/data/helen/{{ environment }}/database" }}
{{ if eq .Data.data.client "mysql" }}
MYSQL_HOST={{ .Data.data.host }}
MYSQL_PORT={{ .Data.data.port }}
MYSQL_USER={{ .Data.data.user }}
MYSQL_PASSWORD={{ .Data.data.password }}
MYSQL_DATABASE={{ .Data.data.database }}
{{ end }}
{{ end }}
EOH
      }

      resources {
        cpu    = 50
        memory = 128
      }
    }
    {% endif %}
  }
}