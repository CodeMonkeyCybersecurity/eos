# Hecate Caddy Configuration
# Generated for cloud deployment with automatic HTTPS via DNS challenge

{
    # Global options
    admin localhost:2019
    
    # Email for Let's Encrypt notifications
    email {{ pillar.get('hecate:admin_email', 'admin@example.com') }}
    
    # Use DNS challenge for all certificates
    {%- if pillar.get('hecate:dns_provider') %}
    acme_dns {{ pillar.get('hecate:dns_provider') }} {
        {%- if pillar.get('hecate:dns_provider') == 'cloudflare' %}
        api_token {{ salt['cmd.run']('/opt/hecate/bin/get-secret.sh dns cloudflare_api_token') }}
        {%- elif pillar.get('hecate:dns_provider') == 'hetzner' %}
        api_token {{ salt['cmd.run']('/opt/hecate/bin/get-secret.sh dns hetzner_api_token') }}
        {%- elif pillar.get('hecate:dns_provider') == 'route53' %}
        access_key_id {{ salt['cmd.run']('/opt/hecate/bin/get-secret.sh dns aws_access_key_id') }}
        secret_access_key {{ salt['cmd.run']('/opt/hecate/bin/get-secret.sh dns aws_secret_access_key') }}
        {%- elif pillar.get('hecate:dns_provider') == 'digitalocean' %}
        auth_token {{ salt['cmd.run']('/opt/hecate/bin/get-secret.sh dns digitalocean_token') }}
        {%- endif %}
    }
    {%- endif %}
    
    # OCSP stapling
    ocsp_stapling on
    
    # Prefer secure protocols
    protocols tls1.2 tls1.3
}

# Import snippets for common configurations
import /opt/hecate/caddy/snippets/*.caddy

# Common security headers snippet
(common_headers) {
    header {
        # Security headers
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
        Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';"
        Permissions-Policy "geolocation=(), microphone=(), camera=()"
        
        # Remove server header
        -Server
        
        # HSTS (Strict Transport Security)
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    }
}

# Authentik authentication snippet
(authentik_auth) {
    forward_auth authentik:9000 {
        uri /outpost.goauthentik.io/auth/caddy
        copy_headers X-Authentik-Username X-Authentik-Groups X-Authentik-Email X-Authentik-Name X-Authentik-Uid
        
        # Trust Authentik's auth decisions
        trusted_proxies private_ranges
    }
}

# Rate limiting snippet
(rate_limit) {
    rate_limit {
        zone dynamic {
            key {remote_host}
            events 100
            window 60s
        }
    }
}

# Health check endpoint (always available)
:2019 {
    respond /health "OK" 200
}

# Default site - redirect to main domain
:80, :443 {
    # Redirect to main domain if no host match
    redir https://{{ pillar.get('hecate:default_domain', 'hecate.example.com') }}{uri} permanent
}

# Main Hecate management interface
{{ pillar.get('hecate:default_domain', 'hecate.example.com') }} {
    import common_headers
    import authentik_auth
    import rate_limit
    
    # Hecate API
    handle /api/* {
        reverse_proxy hecate-api:8080 {
            header_up X-Real-IP {remote_host}
            header_up X-Forwarded-Proto {scheme}
        }
    }
    
    # Hecate UI
    handle {
        root * /opt/hecate/ui
        file_server
        try_files {path} /index.html
    }
}

# Authentik interface
auth.{{ pillar.get('hecate:default_domain', 'hecate.example.com') }} {
    import common_headers
    
    reverse_proxy authentik-server:9000 {
        # Authentik handles its own auth
        header_up X-Real-IP {remote_host}
        header_up X-Forwarded-Proto {scheme}
        
        # Health check
        health_uri /-/health/ready/
        health_interval 10s
        health_timeout 3s
    }
}

# Import dynamic routes from Consul or filesystem
import /opt/hecate/caddy/routes/*.caddy