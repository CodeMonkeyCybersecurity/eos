# Nomad Configuration
# Generated by Eos - DO NOT EDIT MANUALLY

# Get advertise address from file if it exists
{%- set advertise_addr_file = salt['cmd.run']('cat /tmp/nomad_advertise_addr 2>/dev/null | grep ADVERTISE_ADDR | cut -d= -f2', python_shell=True) -%}
{%- set actual_advertise_addr = advertise_addr_file if advertise_addr_file else grains['ipv4'][0] if grains['ipv4'] else '127.0.0.1' -%}

# General configuration
datacenter = "{{ datacenter }}"
region     = "{{ region }}"
data_dir   = "/var/lib/nomad"
log_level  = "{{ log_level }}"

# Bind addresses
bind_addr = "{{ bind_addr }}"

# Advertise addresses
advertise {
  http = "{{ actual_advertise_addr }}:4646"
  rpc  = "{{ actual_advertise_addr }}:4647"
  serf = "{{ actual_advertise_addr }}:4648"
}

# Enable the server
{% if server_mode %}
server {
  enabled          = true
  bootstrap_expect = {{ bootstrap_expect }}
  
  # Server-specific configuration
  heartbeat_grace  = "30s"
  min_heartbeat_ttl = "10s"
  
  {% if enable_acl %}
  # ACL configuration
  default_policy = "deny"
  {% endif %}
  
  # Encryption
  # encrypt = "BASE64_ENCODED_KEY" # Generate with: nomad operator keygen
}
{% endif %}

# Enable the client
{% if client_mode %}
client {
  enabled = true
  
  # Client-specific configuration
  node_class = "general"
  
  {% if client_servers %}
  servers = [
    {%- for server in client_servers %}
    "{{ server }}",
    {%- endfor %}
  ]
  {% endif %}
  
  # Reserved resources
  reserved {
    cpu            = 100
    memory         = 256
    disk           = 1024
    reserved_ports = "22"
  }
  
  # Client options
  options {
    "driver.allowlist" = "{% if enable_docker %}docker,{% endif %}{% if enable_raw_exec %}raw_exec,{% endif %}exec,java"
    "docker.cleanup.image.delay" = "1h"
    "docker.volumes.enabled" = "true"
  }
  
  # Host volumes (example)
  # host_volume "shared" {
  #   path      = "/opt/nomad/shared"
  #   read_only = false
  # }
}
{% endif %}

# ACL configuration
{% if enable_acl %}
acl {
  enabled = true
}
{% endif %}

# Consul integration
{% if consul_integration %}
consul {
  address             = "127.0.0.1:8500"
  server_service_name = "nomad"
  client_service_name = "nomad-client"
  auto_advertise      = true
  server_auto_join    = true
  client_auto_join    = true
  
  # Consul token (if ACL is enabled in Consul)
  # token = "YOUR_CONSUL_TOKEN"
}
{% endif %}

# Vault integration
{% if vault_integration %}
vault {
  enabled          = true
  address          = "http://127.0.0.1:8200"
  create_from_role = "nomad-cluster"
  
  # Vault token (will be provided via environment or API)
  # token = "YOUR_VAULT_TOKEN"
}
{% endif %}

# Telemetry
telemetry {
  collection_interval = "1s"
  disable_hostname    = true
  prometheus_metrics  = true
  publish_allocation_metrics = true
  publish_node_metrics       = true
}

# TLS configuration (example - disabled by default)
# tls {
#   http = true
#   rpc  = true
#   
#   ca_file   = "/etc/nomad.d/ca.pem"
#   cert_file = "/etc/nomad.d/server.pem"
#   key_file  = "/etc/nomad.d/server-key.pem"
#   
#   verify_server_hostname = true
#   verify_https_client    = true
# }

# Autopilot configuration (servers only)
{% if server_mode %}
autopilot {
  cleanup_dead_servers      = true
  last_contact_threshold    = "200ms"
  max_trailing_logs         = 250
  server_stabilization_time = "10s"
  enable_redundancy_zones   = false
  disable_upgrade_migration = false
  enable_custom_upgrades    = false
}
{% endif %}

# UI configuration
ui {
  enabled = true
  
  {% if consul_integration %}
  consul {
    ui_url = "http://{{ actual_advertise_addr }}:8500/ui"
  }
  {% endif %}
  
  {% if vault_integration %}
  vault {
    ui_url = "http://{{ actual_advertise_addr }}:8200/ui"
  }
  {% endif %}
}

# Limits
limits {
  https_handshake_timeout   = "5s"
  rpc_handshake_timeout     = "5s"
  rpc_max_conns_per_client = 100
}

# Plugin configuration
plugin "docker" {
  config {
    endpoint = "unix:///var/run/docker.sock"
    
    # Allow privileged containers (use with caution)
    allow_privileged = false
    
    # Allow host network mode
    allow_caps = ["ALL"]
    
    # Pull images on job start
    pull_activity_timeout = "5m"
    
    # Garbage collection
    gc {
      image       = true
      image_delay = "10m"
      container   = true
      
      dangling_containers {
        enabled        = true
        dry_run        = false
        period         = "5m"
        creation_grace = "5m"
      }
    }
    
    # Volume configuration
    volumes {
      enabled = true
    }
  }
}

{% if enable_raw_exec %}
# Raw exec plugin (security risk - use with caution)
plugin "raw_exec" {
  config {
    enabled = true
    no_cgroups = false
  }
}
{% endif %}