# Example Boundary Deployment Configuration
# This file demonstrates various deployment scenarios for HashiCorp Boundary

---
# Basic Controller Configuration
controller_basic:
  role: controller
  version: "0.15.0"
  cluster_name: "production"
  database_url: "postgresql://boundary:${DB_PASSWORD}@postgres.example.com:5432/boundary"
  public_cluster_addr: "boundary-controller.example.com:9201"
  public_addr: "boundary-controller.example.com:9200"
  
  # Basic TLS setup
  tls_disable: false
  tls_cert_file: "/etc/boundary/tls/cert.pem"
  tls_key_file: "/etc/boundary/tls/key.pem"
  
  # AEAD KMS for development
  kms_type: "aead"
  kms_key_id: "global_root"

---
# Production Controller with AWS KMS
controller_production:
  role: controller
  version: "0.15.0"
  cluster_name: "production"
  database_url: "postgresql://boundary:${DB_PASSWORD}@boundary-db.region.rds.amazonaws.com:5432/boundary"
  public_cluster_addr: "boundary-controller.example.com:9201"
  public_addr: "boundary-api.example.com:443"
  
  # Production TLS
  tls_disable: false
  tls_cert_file: "/etc/boundary/tls/fullchain.pem"
  tls_key_file: "/etc/boundary/tls/privkey.pem"
  
  # AWS KMS for production
  kms_type: "awskms"
  kms_key_id: "arn:aws:kms:us-west-2:123456789012:key/12345678-1234-1234-1234-123456789012"
  kms_region: "us-west-2"

---
# Worker Configuration
worker_basic:
  role: worker
  version: "0.15.0"
  cluster_name: "production"
  
  # Controller addresses
  initial_upstreams:
    - "boundary-controller-1.example.com:9201"
    - "boundary-controller-2.example.com:9201"
    - "boundary-controller-3.example.com:9201"
  
  # Worker proxy configuration
  public_proxy_addr: "boundary-worker.example.com:9202"
  listener_address: "0.0.0.0:9202"
  
  # TLS configuration
  tls_disable: false
  tls_cert_file: "/etc/boundary/tls/cert.pem"
  tls_key_file: "/etc/boundary/tls/key.pem"

---
# Development Mode (Combined Controller + Worker)
dev_mode:
  role: dev
  version: "0.15.0"
  cluster_name: "dev"
  database_url: "postgresql://boundary:boundary@localhost:5432/boundary"
  
  # Development settings
  tls_disable: true  # Only for development!
  listener_address: "127.0.0.1:9200"
  
  # AEAD KMS for development
  kms_type: "aead"
  kms_key_id: "dev_root"

---
# High Availability Controller Cluster
ha_controller:
  role: controller
  version: "0.15.0"
  cluster_name: "production-ha"
  database_url: "postgresql://boundary:${DB_PASSWORD}@boundary-cluster.region.rds.amazonaws.com:5432/boundary"
  
  # HA-specific configuration
  public_cluster_addr: "${HOSTNAME}.boundary-cluster.internal:9201"
  public_addr: "boundary-api.example.com:443"
  
  # Multi-zone TLS
  tls_disable: false
  tls_cert_file: "/etc/boundary/tls/wildcard-cert.pem"
  tls_key_file: "/etc/boundary/tls/wildcard-key.pem"
  
  # Production KMS with multiple keys
  kms_type: "awskms"
  kms_key_id: "alias/boundary-${ENVIRONMENT}-root"
  kms_region: "${AWS_REGION}"

---
# Multi-Region Worker
worker_multiregion:
  role: worker
  version: "0.15.0"
  cluster_name: "global"
  
  # Cross-region controller connectivity
  initial_upstreams:
    - "boundary-controller-us-west-2a.example.com:9201"
    - "boundary-controller-us-west-2b.example.com:9201"
    - "boundary-controller-us-east-1a.example.com:9201"
  
  # Regional proxy configuration
  public_proxy_addr: "boundary-worker-${AWS_REGION}.example.com:9202"
  listener_address: "0.0.0.0:9202"
  
  # Regional TLS certificates
  tls_disable: false
  tls_cert_file: "/etc/boundary/tls/${AWS_REGION}-cert.pem"
  tls_key_file: "/etc/boundary/tls/${AWS_REGION}-key.pem"

---
# Example Salt Pillar Integration
# This shows how the configuration translates to Salt pillar data

salt_pillar_example:
  boundary:
    cluster_name: production
    role: controller
    enabled: true
    version: "0.15.0"
    
    # Database configuration
    database_url: "postgresql://boundary:password@db.example.com/boundary"
    
    # Network configuration
    public_cluster_addr: "boundary-controller.example.com:9201"
    public_addr: "boundary-controller.example.com:9200"
    listener_address: "0.0.0.0"
    
    # TLS configuration
    tls_disable: false
    tls_cert_file: "/etc/boundary/tls/cert.pem"
    tls_key_file: "/etc/boundary/tls/key.pem"
    
    # KMS configuration
    kms:
      type: "awskms"
      key_id: "arn:aws:kms:us-west-2:123456789012:key/12345678-1234-1234-1234-123456789012"
      region: "us-west-2"
    
    # Installation options
    force: false
    clean: false

---
# Deployment Scripts Examples

deployment_examples:
  controller_install: |
    #!/bin/bash
    # Install Boundary Controller
    eos create boundary \
      --role controller \
      --version 0.15.0 \
      --database-url "postgresql://boundary:${DB_PASSWORD}@db.example.com/boundary" \
      --public-cluster-addr "boundary-controller.example.com:9201" \
      --public-addr "boundary-controller.example.com:9200" \
      --tls-cert "/etc/boundary/tls/cert.pem" \
      --tls-key "/etc/boundary/tls/key.pem" \
      --kms-type awskms \
      --kms-key-id "arn:aws:kms:us-west-2:123456789012:key/12345678-1234-1234-1234-123456789012" \
      --kms-region us-west-2 \
      --stream

  worker_install: |
    #!/bin/bash
    # Install Boundary Worker
    eos create boundary \
      --role worker \
      --version 0.15.0 \
      --upstream "controller1:9201,controller2:9201,controller3:9201" \
      --public-proxy-addr "boundary-worker.example.com:9202" \
      --tls-cert "/etc/boundary/tls/cert.pem" \
      --tls-key "/etc/boundary/tls/key.pem" \
      --stream

  dev_install: |
    #!/bin/bash
    # Install Boundary in Development Mode
    eos create boundary \
      --role dev \
      --version 0.15.0 \
      --database-url "postgresql://boundary:boundary@localhost/boundary" \
      --tls-disable \
      --stream

  upgrade: |
    #!/bin/bash
    # Upgrade Boundary to new version
    eos create boundary \
      --role controller \
      --version 0.16.0 \
      --force \
      --stream

  removal: |
    #!/bin/bash
    # Remove Boundary completely
    eos delete boundary \
      --force \
      --stream

  removal_preserve_data: |
    #!/bin/bash
    # Remove Boundary but preserve data
    eos delete boundary \
      --keep-data \
      --force \
      --stream