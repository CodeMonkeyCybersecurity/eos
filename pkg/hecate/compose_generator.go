// pkg/hecate/compose_generator.go
// Complete docker-compose.yml generation for Hecate

package hecate

import (
	"fmt"
	"path/filepath"

	"github.com/CodeMonkeyCybersecurity/eos/pkg/crypto"
	"github.com/CodeMonkeyCybersecurity/eos/pkg/eos_io"
	"github.com/CodeMonkeyCybersecurity/eos/pkg/eos_unix"
	"github.com/uptrace/opentelemetry-go-extra/otelzap"
	"go.uber.org/zap"
)

// GenerateCompleteHecateStack generates a complete docker-compose.yml with all Hecate components
func GenerateCompleteHecateStack(rc *eos_io.RuntimeContext, domain string) error {
	logger := otelzap.Ctx(rc.Ctx)
	logger.Info("Generating complete Hecate docker-compose stack")

	// ASSESS - Check if /opt/hecate exists
	if err := eos_unix.MkdirP(rc.Ctx, BaseDir, 0o755); err != nil {
		return fmt.Errorf("failed to create base directory %s: %w", BaseDir, err)
	}

	// Create required subdirectories (minimal stack)
	dirs := []string{
		filepath.Join(BaseDir, "logs/caddy"),
		filepath.Join(BaseDir, "media"),
		filepath.Join(BaseDir, "custom-templates"),
		filepath.Join(BaseDir, "authentik/blueprints/custom"),
	}

	for _, dir := range dirs {
		if err := eos_unix.MkdirP(rc.Ctx, dir, 0o755); err != nil {
			return fmt.Errorf("failed to create directory %s: %w", dir, err)
		}
	}

	logger.Info("Created directory structure", zap.String("base", BaseDir))

	// INTERVENE - Generate secrets
	secrets, err := generateHecateSecrets(rc)
	if err != nil {
		return fmt.Errorf("failed to generate secrets: %w", err)
	}

	// Generate .env file
	if err := generateEnvFile(rc, secrets); err != nil {
		return fmt.Errorf("failed to generate .env file: %w", err)
	}

	// Generate docker-compose.yml
	if err := generateDockerCompose(rc); err != nil {
		return fmt.Errorf("failed to generate docker-compose.yml: %w", err)
	}

	// Generate Caddyfile
	if err := GenerateMinimalCaddyfile(rc, domain); err != nil {
		return fmt.Errorf("failed to generate Caddyfile: %w", err)
	}

	// EVALUATE - Verify files were created
	requiredFiles := []string{
		filepath.Join(BaseDir, "docker-compose.yml"),
		filepath.Join(BaseDir, ".env"),
		filepath.Join(BaseDir, "Caddyfile"),
	}

	for _, file := range requiredFiles {
		if !eos_unix.FileExists(file) {
			return fmt.Errorf("verification failed: %s not created", file)
		}
	}

	logger.Info("Successfully generated Hecate stack files",
		zap.String("location", BaseDir))

	return nil
}

// HecateSecrets holds generated secrets for Hecate services
type HecateSecrets struct {
	PGPass                 string
	PGUser                 string
	PGDatabase             string
	AuthentikSecretKey     string
	AuthentikTag           string
	ComposePortHTTP        string
	ComposePortHTTPS       string
	AuthentikWorkerThreads string
}

// generateHecateSecrets generates all required secrets for Hecate
func generateHecateSecrets(rc *eos_io.RuntimeContext) (*HecateSecrets, error) {
	logger := otelzap.Ctx(rc.Ctx)
	logger.Info("Generating secrets for Hecate services")

	// Generate strong passwords
	pgPass, err := crypto.GeneratePassword(32)
	if err != nil {
		return nil, fmt.Errorf("failed to generate PostgreSQL password: %w", err)
	}

	authentikKey, err := crypto.GeneratePassword(50)
	if err != nil {
		return nil, fmt.Errorf("failed to generate Authentik secret key: %w", err)
	}

	secrets := &HecateSecrets{
		PGPass:                 pgPass,
		PGUser:                 "authentik",
		PGDatabase:             "authentik",
		AuthentikSecretKey:     authentikKey,
		AuthentikTag:           "2025.8",
		ComposePortHTTP:        "9000",
		ComposePortHTTPS:       "9443",
		AuthentikWorkerThreads: "4",
	}

	logger.Info("Generated secrets for Hecate services")
	return secrets, nil
}

// generateEnvFile creates the .env file with secrets
func generateEnvFile(rc *eos_io.RuntimeContext, secrets *HecateSecrets) error {
	logger := otelzap.Ctx(rc.Ctx)
	logger.Info("Generating .env file")

	envContent := fmt.Sprintf(`# Hecate Environment Configuration
# Generated by Eos

# PostgreSQL Configuration
PG_PASS=%s
PG_USER=%s
PG_DB=%s

# Authentik Configuration
AUTHENTIK_SECRET_KEY=%s
AUTHENTIK_TAG=%s
AUTHENTIK_IMAGE=ghcr.io/goauthentik/server
AUTHENTIK_WORKER__THREADS=%s

# Compose Port Configuration
COMPOSE_PORT_HTTP=%s
COMPOSE_PORT_HTTPS=%s
`,
		secrets.PGPass,
		secrets.PGUser,
		secrets.PGDatabase,
		secrets.AuthentikSecretKey,
		secrets.AuthentikTag,
		secrets.AuthentikWorkerThreads,
		secrets.ComposePortHTTP,
		secrets.ComposePortHTTPS,
	)

	envPath := filepath.Join(BaseDir, ".env")
	if err := eos_unix.WriteFile(rc.Ctx, envPath, []byte(envContent), 0600, ""); err != nil {
		return fmt.Errorf("failed to write .env file: %w", err)
	}

	logger.Info("Generated .env file", zap.String("path", envPath))
	return nil
}

// generateDockerCompose creates the docker-compose.yml file with minimal stack
func generateDockerCompose(rc *eos_io.RuntimeContext) error {
	logger := otelzap.Ctx(rc.Ctx)
	logger.Info("Generating docker-compose.yml (minimal stack: Caddy + Authentik)")

	composeContent := `services:

  caddy:
    image: caddy:latest
    container_name: hecate-caddy
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - ./logs/caddy:/var/log/caddy:rw
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - hecate-net

  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    env_file:
      - .env
    networks:
      - hecate-net

  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    networks:
      - hecate-net

  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.8}
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_WORKER__THREADS: ${AUTHENTIK_WORKER__THREADS:-4}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
      - ./authentik/blueprints/custom:/blueprints/custom
    env_file:
      - .env
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hecate-net

  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.8}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_WORKER__THREADS: ${AUTHENTIK_WORKER__THREADS:-4}
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
      - ./authentik/blueprints/custom:/blueprints/custom
    env_file:
      - .env
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hecate-net

networks:
  hecate-net:

volumes:
  database:
    driver: local
  redis:
  caddy_data:
  caddy_config:
`

	composePath := filepath.Join(BaseDir, "docker-compose.yml")
	if err := eos_unix.WriteFile(rc.Ctx, composePath, []byte(composeContent), 0644, ""); err != nil {
		return fmt.Errorf("failed to write docker-compose.yml: %w", err)
	}

	logger.Info("Generated docker-compose.yml", zap.String("path", composePath))
	return nil
}
