// pkg/vault/template_bionicgpt.go
// Vault Agent template for BionicGPT service secrets

package vault

import (
	"fmt"

	"github.com/CodeMonkeyCybersecurity/eos/pkg/eos_io"
)

// BionicGPTEnvTemplate returns the Vault Agent template for BionicGPT .env file
// This template references secrets stored in Vault at secret/data/services/{env}/bionicgpt/*
func BionicGPTEnvTemplate(rc *eos_io.RuntimeContext, environment string) string {
	secretPath := fmt.Sprintf("secret/data/services/%s/bionicgpt", environment)

	return fmt.Sprintf(`# BionicGPT Environment Configuration
# Rendered by Vault Agent from secrets in Vault
# DO NOT EDIT - Changes will be overwritten on secret rotation
# Generated by Eos - Code Monkey Cybersecurity

# PostgreSQL Configuration
POSTGRES_USER=postgres
{{ with secret "%s/postgres_password" }}
POSTGRES_PASSWORD={{ .Data.data.value }}
{{ end }}
POSTGRES_DB=bionic-gpt

# Application Settings
APP_NAME=BionicGPT
LOG_LEVEL=INFO
TZ=Australia/Perth

# JWT Authentication
{{ with secret "%s/jwt_secret" }}
JWT_SECRET={{ .Data.data.value }}
{{ end }}

# Database Connection
{{ with secret "%s/postgres_password" }}
APP_DATABASE_URL=postgresql://bionic_application:{{ .Data.data.value }}@postgres:5432/bionic-gpt?sslmode=disable
{{ end }}

# LiteLLM Proxy Configuration
{{ with secret "%s/litellm_master_key" }}
LITELLM_MASTER_KEY={{ .Data.data.value }}
{{ end }}

# OpenAI Configuration (via LiteLLM Proxy)
# LiteLLM translates OpenAI format to Azure OpenAI format
OPENAI_API_BASE=http://litellm-proxy:4000
{{ with secret "%s/litellm_master_key" }}
OPENAI_API_KEY={{ .Data.data.value }}
{{ end }}
OPENAI_MODEL=gpt-4

# Feature Flags
ENABLE_RAG=true
ENABLE_AUDIT_LOG=true
ENABLE_MULTI_TENANT=true

# Embeddings Configuration (via LiteLLM)
EMBEDDINGS_API_BASE=http://litellm-proxy:4000
{{ with secret "%s/litellm_master_key" }}
EMBEDDINGS_API_KEY={{ .Data.data.value }}
{{ end }}
EMBEDDINGS_MODEL=text-embedding-ada-002
`,
		secretPath, secretPath, secretPath, secretPath, secretPath, secretPath)
}

// BionicGPTTemplateConfig returns the Vault Agent template configuration
// This configures where the template is stored, where it renders, and what command to run on changes
func BionicGPTTemplateConfig() TemplateConfig {
	return TemplateConfig{
		Source:      "/etc/vault.d/templates/bionicgpt.env.ctmpl",
		Destination: "/opt/bionicgpt/.env",
		Perms:       "0640",
		Command:     "docker compose -f /opt/bionicgpt/docker-compose.yml up -d --force-recreate",
		WaitMin:     "2s",
		WaitMax:     "10s",
	}
}

// TemplateConfig represents a Vault Agent template configuration block
type TemplateConfig struct {
	Source      string // Path to template file
	Destination string // Where to render output
	Perms       string // File permissions (octal string)
	Command     string // Command to run on template change
	WaitMin     string // Minimum wait before running command
	WaitMax     string // Maximum wait before running command
}
