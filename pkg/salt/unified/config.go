package unified

import (
	"fmt"
	"os"
	"strconv"
	"strings"
	"time"

	"go.uber.org/zap"
)

// LoadConfigFromEnv loads client configuration from environment variables
func LoadConfigFromEnv() (ClientConfig, error) {
	config := ClientConfig{}
	
	// API Configuration
	config.APIURL = getEnvOrDefault("SALT_API_URL", DefaultAPIURL)
	config.Username = getEnvOrDefault("SALT_API_USER", DefaultAPIUser)
	config.Password = os.Getenv("SALT_API_PASSWORD") // No default for security
	config.EAuth = getEnvOrDefault("SALT_API_EAUTH", DefaultEAuth)
	
	// Behavior Configuration
	var err error
	config.PreferAPI, err = getEnvBool("SALT_PREFER_API", true)
	if err != nil {
		return config, fmt.Errorf("invalid SALT_PREFER_API value: %w", err)
	}
	
	config.FallbackToLocal, err = getEnvBool("SALT_FALLBACK_LOCAL", true)
	if err != nil {
		return config, fmt.Errorf("invalid SALT_FALLBACK_LOCAL value: %w", err)
	}
	
	config.InsecureSkipVerify, err = getEnvBool("SALT_API_INSECURE", false)
	if err != nil {
		return config, fmt.Errorf("invalid SALT_API_INSECURE value: %w", err)
	}
	
	// Timeout Configuration
	timeoutStr := getEnvOrDefault("SALT_API_TIMEOUT", "5m")
	config.Timeout, err = time.ParseDuration(timeoutStr)
	if err != nil {
		return config, fmt.Errorf("invalid SALT_API_TIMEOUT value '%s': %w", timeoutStr, err)
	}
	
	// Retry Configuration
	maxRetriesStr := getEnvOrDefault("SALT_API_MAX_RETRIES", "3")
	retries, err := strconv.Atoi(maxRetriesStr)
	if err != nil {
		return config, fmt.Errorf("invalid SALT_API_MAX_RETRIES value '%s': %w", maxRetriesStr, err)
	}
	config.MaxRetries = retries
	
	// Path Configuration
	config.ConfigPath = getEnvOrDefault("SALT_CONFIG_PATH", DefaultAPIConfigPath)
	config.CredentialsPath = getEnvOrDefault("SALT_CREDENTIALS_PATH", DefaultCredentialsPath)
	
	// Create default logger
	logger, err := zap.NewProduction()
	if err != nil {
		return config, fmt.Errorf("failed to create default logger: %w", err)
	}
	config.Logger = logger
	
	return config, nil
}

// DefaultConfig returns a configuration with sensible defaults
func DefaultConfig() ClientConfig {
	logger, _ := zap.NewProduction() // Ignore error for defaults
	
	return ClientConfig{
		// API Configuration
		APIURL:             DefaultAPIURL,
		Username:           DefaultAPIUser,
		Password:           "", // Must be provided
		EAuth:              DefaultEAuth,
		
		// Behavior Configuration
		PreferAPI:          true,
		FallbackToLocal:    true,
		Timeout:            DefaultAPITimeout,
		MaxRetries:         DefaultMaxRetries,
		InsecureSkipVerify: false,
		
		// Path Configuration
		ConfigPath:         DefaultAPIConfigPath,
		CredentialsPath:    DefaultCredentialsPath,
		
		// Logging
		Logger:             logger,
	}
}

// ValidateConfig validates a client configuration
func ValidateConfig(config ClientConfig) error {
	if config.APIURL == "" {
		return fmt.Errorf("APIURL cannot be empty")
	}
	
	if config.Username == "" {
		return fmt.Errorf("Username cannot be empty")
	}
	
	if config.EAuth == "" {
		return fmt.Errorf("EAuth cannot be empty")
	}
	
	if config.Timeout <= 0 {
		return fmt.Errorf("Timeout must be positive")
	}
	
	if config.MaxRetries < 0 {
		return fmt.Errorf("MaxRetries cannot be negative")
	}
	
	if config.ConfigPath == "" {
		return fmt.Errorf("ConfigPath cannot be empty")
	}
	
	if config.CredentialsPath == "" {
		return fmt.Errorf("CredentialsPath cannot be empty")
	}
	
	if config.Logger == nil {
		return fmt.Errorf("Logger cannot be nil")
	}
	
	return nil
}

// LoadCredentialsFromFile loads API credentials from a file
func LoadCredentialsFromFile(path string) (username, password string, err error) {
	if _, err := os.Stat(path); os.IsNotExist(err) {
		return "", "", fmt.Errorf("credentials file does not exist: %s", path)
	}
	
	data, err := os.ReadFile(path)
	if err != nil {
		return "", "", fmt.Errorf("failed to read credentials file: %w", err)
	}
	
	lines := strings.Split(string(data), "\n")
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if strings.HasPrefix(line, "#") || line == "" {
			continue
		}
		
		parts := strings.SplitN(line, "=", 2)
		if len(parts) != 2 {
			continue
		}
		
		key := strings.TrimSpace(parts[0])
		value := strings.TrimSpace(parts[1])
		
		switch key {
		case "username":
			username = value
		case "password":
			password = value
		}
	}
	
	if username == "" {
		return "", "", fmt.Errorf("username not found in credentials file")
	}
	
	if password == "" {
		return "", "", fmt.Errorf("password not found in credentials file")
	}
	
	return username, password, nil
}

// SaveCredentialsToFile saves API credentials to a file with secure permissions
func SaveCredentialsToFile(path, username, password string) error {
	content := fmt.Sprintf("# Salt API credentials\n# Generated by EOS\nusername=%s\npassword=%s\n", username, password)
	
	// Create file with restrictive permissions
	file, err := os.OpenFile(path, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0600)
	if err != nil {
		return fmt.Errorf("failed to create credentials file: %w", err)
	}
	defer file.Close()
	
	if _, err := file.WriteString(content); err != nil {
		return fmt.Errorf("failed to write credentials: %w", err)
	}
	
	return nil
}

// GetConfigSummary returns a summary of the configuration (without sensitive data)
func GetConfigSummary(config ClientConfig) map[string]interface{} {
	return map[string]interface{}{
		"api_url":              config.APIURL,
		"username":             config.Username,
		"password_set":        config.Password != "",
		"eauth":               config.EAuth,
		"prefer_api":          config.PreferAPI,
		"fallback_to_local":   config.FallbackToLocal,
		"timeout":             config.Timeout.String(),
		"max_retries":         config.MaxRetries,
		"insecure_skip_verify": config.InsecureSkipVerify,
		"config_path":         config.ConfigPath,
		"credentials_path":    config.CredentialsPath,
	}
}

// Helper functions

func getEnvOrDefault(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

func getEnvBool(key string, defaultValue bool) (bool, error) {
	value := os.Getenv(key)
	if value == "" {
		return defaultValue, nil
	}
	
	switch strings.ToLower(value) {
	case "true", "1", "yes", "on":
		return true, nil
	case "false", "0", "no", "off":
		return false, nil
	default:
		return defaultValue, fmt.Errorf("invalid boolean value: %s", value)
	}
}

func getEnvInt(key string, defaultValue int) (int, error) {
	value := os.Getenv(key)
	if value == "" {
		return defaultValue, nil
	}
	
	intValue, err := strconv.Atoi(value)
	if err != nil {
		return defaultValue, fmt.Errorf("invalid integer value for %s: %s", key, value)
	}
	
	return intValue, nil
}

func getEnvDuration(key string, defaultValue time.Duration) (time.Duration, error) {
	value := os.Getenv(key)
	if value == "" {
		return defaultValue, nil
	}
	
	duration, err := time.ParseDuration(value)
	if err != nil {
		return defaultValue, fmt.Errorf("invalid duration value for %s: %s", key, value)
	}
	
	return duration, nil
}