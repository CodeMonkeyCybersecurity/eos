// pkg/temporal/config.go
package temporal

import (
	"fmt"
	"strings"
)

// generateConfigYAML generates the main Temporal configuration file
func generateConfigYAML(config *TemporalConfig) string {
	retentionDays := parseRetentionDays(config.WorkflowRetention)
	archivalState := "disabled"
	if config.EnableArchival {
		archivalState = "enabled"
	}

	return fmt.Sprintf(`# Temporal Configuration for Iris Framework
# Generated by EOS
# Deployment Mode: production

log:
  stdout: true
  level: info

persistence:
  defaultStore: default
  visibilityStore: visibility
  numHistoryShards: %d
  datastores:
    default:
      sql:
        pluginName: "postgres12"
        databaseName: "temporal"
        connectAddr: "localhost:5432"
        connectProtocol: "tcp"
        user: "temporal"
        password: "%s"
        maxConns: 20
        maxIdleConns: 20
        maxConnLifetime: "1h"
    visibility:
      sql:
        pluginName: "postgres12"
        databaseName: "temporal_visibility"
        connectAddr: "localhost:5432"
        connectProtocol: "tcp"
        user: "temporal"
        password: "%s"
        maxConns: 10
        maxIdleConns: 10
        maxConnLifetime: "1h"

global:
  membership:
    maxJoinDuration: 30s
    broadcastAddress: "%s"
  pprof:
    port: 7936
  metrics:
    prometheus:
      timerType: "histogram"
      listenAddress: "0.0.0.0:%d"

services:
  frontend:
    rpc:
      grpcPort: %d
      membershipPort: 6933
      bindOnIP: "%s"
    metrics:
      prometheus:
        handlerPath: "/metrics"
        listenAddress: "0.0.0.0:9091"

  matching:
    rpc:
      grpcPort: 7235
      membershipPort: 6935
      bindOnIP: "%s"

  history:
    rpc:
      grpcPort: 7234
      membershipPort: 6934
      bindOnIP: "%s"

  worker:
    rpc:
      grpcPort: 7239
      membershipPort: 6939
      bindOnIP: "%s"

clusterMetadata:
  enableGlobalNamespace: false
  failoverVersionIncrement: 10
  masterClusterName: "iris-primary"
  currentClusterName: "iris-primary"
  clusterInformation:
    iris-primary:
      enabled: true
      initialFailoverVersion: 1
      rpcName: "frontend"
      rpcAddress: "localhost:%d"

dcRedirectionPolicy:
  policy: "noop"

archival:
  history:
    state: "%s"
    enableRead: %t
  visibility:
    state: "%s"
    enableRead: %t

publicClient:
  hostPort: "localhost:%d"

namespaceDefaults:
  archival:
    history:
      state: "%s"
    visibility:
      state: "%s"
  retention:
    retentionDays: %d

dynamicConfigClient:
  filepath: "%s/config/dynamic_config.yaml"
  pollInterval: "10s"
`,
		config.HistoryShards,
		config.PostgreSQLPassword,
		config.PostgreSQLPassword,
		config.Host,
		config.MetricsPort,
		config.Port,
		config.Host,
		config.Host,
		config.Host,
		config.Host,
		config.Port,
		archivalState, config.EnableArchival,
		archivalState, config.EnableArchival,
		config.Port,
		archivalState,
		archivalState,
		retentionDays,
		config.InstallDir,
	)
}

// generateDynamicConfigYAML generates the dynamic configuration file
func generateDynamicConfigYAML(config *TemporalConfig) string {
	retentionDays := parseRetentionDays(config.WorkflowRetention)

	return fmt.Sprintf(`# Iris Temporal Dynamic Configuration
# Allows runtime configuration changes without restart

system.forceSearchAttributesCacheRefreshOnRead:
  - value: true
    constraints: {}

frontend.workflowTaskTimeout:
  - value: "10s"
    constraints: {}

history.maxWorkflowRetentionDays:
  - value: %d
    constraints: {}

# Enable advanced visibility features
system.advancedVisibilityWritingMode:
  - value: "dual"
    constraints: {}
`, retentionDays)
}

// parseRetentionDays converts retention string (e.g., "168h") to days
func parseRetentionDays(retention string) int {
	// Simple parser for "XXXh" format
	retention = strings.TrimSuffix(retention, "h")
	var hours int
	_, _ = fmt.Sscanf(retention, "%d", &hours)
	if hours == 0 {
		hours = 168 // Default 7 days
	}
	return hours / 24
}
