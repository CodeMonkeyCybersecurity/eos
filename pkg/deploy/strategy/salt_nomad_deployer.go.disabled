package strategy

import (
	"context"
	"fmt"
	"time"

	"github.com/CodeMonkeyCybersecurity/eos/pkg/eos_io"
	"github.com/CodeMonkeyCybersecurity/eos/pkg/orchestrator"
	orchNomad "github.com/CodeMonkeyCybersecurity/eos/pkg/orchestrator/nomad"
	orchSalt "github.com/CodeMonkeyCybersecurity/eos/pkg/orchestrator/salt"
	"go.uber.org/zap"
)

// SaltNomadDeployer implements Salt+Nomad deployment strategy
type SaltNomadDeployer struct {
	*BaseDeployer
	saltClient   orchestrator.SaltOrchestrator
	nomadClient  orchestrator.NomadClient
	// TODO: Add generators
}

// NewSaltNomadDeployer creates a new Salt+Nomad deployer
func NewSaltNomadDeployer(rc *eos_io.RuntimeContext, saltClient orchestrator.SaltOrchestrator, nomadClient orchestrator.NomadClient) *SaltNomadDeployer {
	return &SaltNomadDeployer{
		BaseDeployer: NewBaseDeployer(rc, SaltNomadStrategy),
		saltClient:   saltClient,
		nomadClient:  nomadClient,
		// TODO: Initialize generators
	}
}

// Deploy implements Salt+Nomad deployment
func (d *SaltNomadDeployer) Deploy(ctx context.Context, component *Component) (*DeploymentResult, error) {
	// Record start time
	startTime := time.Now()

	// ASSESS
	d.logDeploymentStep("assess", component)
	if err := d.Validate(ctx, component); err != nil {
		return d.createDeploymentResult(component, "validation_failed", err), err
	}

	// Check prerequisites
	if err := d.checkPrerequisites(ctx); err != nil {
		return d.createDeploymentResult(component, "prerequisites_failed", err), err
	}

	// Check for dry-run mode
	if dryRun, ok := component.Config["dry_run"].(bool); ok && dryRun {
		d.logger.Info("Dry-run mode - showing generated configurations",
			zap.String("component", component.Name))
		
		if err := d.previewConfigurations(ctx, component); err != nil {
			return d.createDeploymentResult(component, "preview_failed", err), err
		}
		
		return d.createDeploymentResult(component, "dry_run", nil), nil
	}

	// INTERVENE - Phase 1: Salt configuration
	d.logDeploymentStep("intervene_salt", component,
		zap.String("phase", "salt_configuration"))

	// Convert component to orchestrator.Component
	orchComponent := d.convertToOrchComponent(component)

	// Apply base configuration via Salt
	if err := d.applySaltConfiguration(ctx, orchComponent); err != nil {
		return d.createDeploymentResult(component, "salt_configuration_failed", err), err
	}

	// INTERVENE - Phase 2: Nomad deployment
	d.logDeploymentStep("intervene_nomad", component,
		zap.String("phase", "nomad_deployment"))

	// Generate and submit Nomad job
	jobID, err := d.deployToNomad(ctx, orchComponent)
	if err != nil {
		// Attempt to rollback Salt changes
		d.logger.Warn("Nomad deployment failed, attempting Salt rollback")
		if rollbackErr := d.rollbackSaltChanges(ctx, component); rollbackErr != nil {
			d.logger.Error("Failed to rollback Salt changes",
				zap.Error(rollbackErr))
		}
		return d.createDeploymentResult(component, "nomad_deployment_failed", err), err
	}

	// EVALUATE
	d.logDeploymentStep("evaluate", component)
	
	// Wait for Nomad allocation to be healthy
	if err := d.waitForNomadHealth(ctx, jobID, 5*time.Minute); err != nil {
		d.logger.Warn("Nomad health check failed",
			zap.String("job_id", jobID),
			zap.Error(err))
		// Don't fail deployment, just warn
	}

	// Verify deployment through both Salt and Nomad
	if err := d.verifyDeployment(ctx, component, jobID); err != nil {
		d.logger.Warn("Deployment verification failed",
			zap.String("component", component.Name),
			zap.Error(err))
	}

	result := d.createDeploymentResult(component, "success", nil)
	result.StartTime = startTime // Preserve original start time
	
	// Add deployment outputs
	result.Outputs["salt_state"] = fmt.Sprintf("eos.%s", component.Name)
	result.Outputs["nomad_job_id"] = jobID
	result.Outputs["deployment_method"] = "salt-nomad"
	
	// Store rollback info
	result.RollbackInfo = &RollbackInfo{
		PreviousVersion: component.Version,
		Strategy:        SaltNomadStrategy,
		Timestamp:       time.Now(),
		StateBackup: map[string]interface{}{
			"nomad_job_id": jobID,
			"salt_state":   fmt.Sprintf("eos.%s", component.Name),
		},
	}
	
	d.recordDeploymentMetrics(result)

	return result, nil
}

// Validate validates the component configuration
func (d *SaltNomadDeployer) Validate(ctx context.Context, component *Component) error {
	// Base validation
	if err := d.validateComponent(component); err != nil {
		return err
	}

	// Ensure clients are available
	if d.saltClient == nil {
		return fmt.Errorf("Salt client not initialized")
	}
	if d.nomadClient == nil {
		return fmt.Errorf("Nomad client not initialized")
	}

	// Validate component type is supported
	if !d.SupportsComponent(component.Type) {
		return fmt.Errorf("component type %s not supported by Salt+Nomad strategy", component.Type)
	}

	// Component-specific validation
	switch component.Name {
	case "consul":
		return d.validateConsulConfig(component)
	case "vault":
		return d.validateVaultConfig(component)
	case "postgres":
		return d.validatePostgresConfig(component)
	default:
		// For application services, ensure required fields
		if component.Config["image"] == nil {
			return &ValidationError{
				Component: component.Name,
				Field:     "image",
				Message:   "container image is required for Nomad deployment",
			}
		}
	}

	return nil
}

// Rollback attempts to rollback a Salt+Nomad deployment
func (d *SaltNomadDeployer) Rollback(ctx context.Context, deployment *DeploymentResult) error {
	d.logger.Info("Starting Salt+Nomad deployment rollback",
		zap.String("component", deployment.Component),
		zap.String("deployment_id", deployment.ID))

	var rollbackErrors []error

	// Phase 1: Stop/remove Nomad job
	if deployment.RollbackInfo != nil && deployment.RollbackInfo.StateBackup != nil {
		if jobID, ok := deployment.RollbackInfo.StateBackup["nomad_job_id"].(string); ok {
			d.logger.Info("Stopping Nomad job",
				zap.String("job_id", jobID))
			
			if err := d.nomadClient.StopJob(ctx, jobID); err != nil {
				rollbackErrors = append(rollbackErrors, 
					fmt.Errorf("failed to stop Nomad job: %w", err))
			} else {
				// Wait for job to stop
				d.waitForJobStop(ctx, jobID, 2*time.Minute)
			}
		}
	}

	// Phase 2: Rollback Salt configuration
	if deployment.RollbackInfo != nil && deployment.RollbackInfo.StateBackup != nil {
		if stateName, ok := deployment.RollbackInfo.StateBackup["salt_state"].(string); ok {
			d.logger.Info("Applying Salt rollback state",
				zap.String("state", stateName+".remove"))
			
			if err := d.saltClient.ApplyState(ctx, stateName+".remove", nil, nil); err != nil {
				rollbackErrors = append(rollbackErrors,
					fmt.Errorf("failed to apply Salt rollback: %w", err))
			}
		}
	}

	if len(rollbackErrors) > 0 {
		return fmt.Errorf("rollback completed with %d errors: %v", 
			len(rollbackErrors), rollbackErrors)
	}

	return nil
}

// GetStatus gets the status of a deployed component
func (d *SaltNomadDeployer) GetStatus(ctx context.Context, component *Component) (*DeploymentStatus, error) {
	status := &DeploymentStatus{
		Component:   component.Name,
		LastChecked: time.Now(),
		Details:     make(map[string]interface{}),
	}

	// Get Nomad job status
	jobID := fmt.Sprintf("eos-%s", component.Name)
	jobStatus, err := d.nomadClient.GetJobStatus(ctx, jobID)
	if err != nil {
		status.Status = "unknown"
		status.Healthy = false
		status.Details["error"] = err.Error()
		return status, nil
	}

	// Map Nomad status
	nomadStatus := jobStatus.(map[string]interface{})
	if running, ok := nomadStatus["running"].(int); ok && running > 0 {
		status.Status = "running"
		status.Healthy = true
	} else {
		status.Status = "stopped"
		status.Healthy = false
	}

	// Add Nomad details
	status.Details["nomad_job_id"] = jobID
	status.Details["allocations"] = nomadStatus

	// Also check Salt status for configuration
	if serviceName := d.getServiceName(component); serviceName != "" {
		running, err := d.saltClient.IsServiceRunning(ctx, serviceName)
		if err == nil {
			status.Details["salt_service_running"] = running
		}
	}

	return status, nil
}

// SupportsComponent checks if this deployer supports the component type
func (d *SaltNomadDeployer) SupportsComponent(componentType ComponentType) bool {
	// Salt+Nomad is best for services and applications
	return componentType == ServiceType || componentType == DatabaseType
}

// Helper methods

func (d *SaltNomadDeployer) convertToOrchComponent(component *Component) orchestrator.Component {
	orchComp := orchestrator.Component{
		Name:    component.Name,
		Version: component.Version,
		Labels: map[string]string{
			"environment": component.Environment,
			"managed-by":  "eos",
			"strategy":    string(component.Strategy),
		},
	}

	// Map component type
	switch component.Type {
	case ServiceType:
		orchComp.Type = orchestrator.ServiceType
	case DatabaseType:
		orchComp.Type = orchestrator.DatabaseType
	case StorageType:
		orchComp.Type = orchestrator.StorageType
	case InfrastructureType:
		orchComp.Type = orchestrator.InfrastructureType
	default:
		orchComp.Type = orchestrator.ServiceType
	}

	// Map configuration based on component name
	switch component.Name {
	case "consul":
		orchComp.Config = d.mapConsulConfig(component.Config)
	case "vault":
		orchComp.Config = d.mapVaultConfig(component.Config)
	case "postgres":
		orchComp.Config = d.mapPostgresConfig(component.Config)
	default:
		// For generic services, pass through config
		orchComp.Config = component.Config
	}

	return orchComp
}

func (d *SaltNomadDeployer) applySaltConfiguration(ctx context.Context, component orchestrator.Component) error {
	// Generate Salt states for base configuration
	d.logger.Info("Generating Salt states for base configuration",
		zap.String("component", component.Name))
	
	states, err := d.stateGen.GenerateState(component)
	if err != nil {
		return fmt.Errorf("failed to generate Salt states: %w", err)
	}

	// Generate pillar data
	pillar, err := d.pillarGen.GeneratePillar(component)
	if err != nil {
		return fmt.Errorf("failed to generate pillar data: %w", err)
	}

	// Apply base configuration state
	stateName := fmt.Sprintf("eos.%s.base", component.Name)
	d.logger.Info("Applying Salt base configuration",
		zap.String("state", stateName))
	
	if err := d.saltClient.ApplyState(ctx, stateName, states, pillar); err != nil {
		return fmt.Errorf("failed to apply Salt configuration: %w", err)
	}

	// Verify configuration was applied
	d.logger.Info("Verifying Salt configuration")
	if err := d.verifySaltConfiguration(ctx, component); err != nil {
		return fmt.Errorf("Salt configuration verification failed: %w", err)
	}

	return nil
}

func (d *SaltNomadDeployer) deployToNomad(ctx context.Context, component orchestrator.Component) (string, error) {
	// Generate Nomad job specification
	d.logger.Info("Generating Nomad job specification",
		zap.String("component", component.Name))
	
	jobSpec, err := d.jobGen.GenerateJob(component)
	if err != nil {
		return "", fmt.Errorf("failed to generate Nomad job: %w", err)
	}

	// Submit job to Nomad
	d.logger.Info("Submitting job to Nomad")
	jobID, err := d.nomadClient.SubmitJob(ctx, jobSpec)
	if err != nil {
		return "", fmt.Errorf("failed to submit Nomad job: %w", err)
	}

	d.logger.Info("Nomad job submitted successfully",
		zap.String("job_id", jobID))

	return jobID, nil
}

func (d *SaltNomadDeployer) waitForNomadHealth(ctx context.Context, jobID string, timeout time.Duration) error {
	d.logger.Info("Waiting for Nomad allocation to be healthy",
		zap.String("job_id", jobID),
		zap.Duration("timeout", timeout))

	deadline := time.Now().Add(timeout)
	checkInterval := 5 * time.Second

	for time.Now().Before(deadline) {
		status, err := d.nomadClient.GetJobStatus(ctx, jobID)
		if err != nil {
			return fmt.Errorf("failed to get job status: %w", err)
		}

		// Check if allocations are healthy
		if d.isJobHealthy(status) {
			d.logger.Info("Nomad job is healthy",
				zap.String("job_id", jobID))
			return nil
		}

		d.logger.Debug("Waiting for job to become healthy",
			zap.String("job_id", jobID),
			zap.Any("status", status))
		
		time.Sleep(checkInterval)
	}

	return fmt.Errorf("job %s did not become healthy within %v", jobID, timeout)
}

func (d *SaltNomadDeployer) isJobHealthy(jobStatus interface{}) bool {
	// Parse job status
	status, ok := jobStatus.(map[string]interface{})
	if !ok {
		return false
	}

	running, _ := status["running"].(int)
	desired, _ := status["desired"].(int)
	failed, _ := status["failed"].(int)

	// Job is healthy if all desired allocations are running and none failed
	return running == desired && failed == 0 && desired > 0
}

func (d *SaltNomadDeployer) waitForJobStop(ctx context.Context, jobID string, timeout time.Duration) error {
	deadline := time.Now().Add(timeout)
	checkInterval := 2 * time.Second

	for time.Now().Before(deadline) {
		status, err := d.nomadClient.GetJobStatus(ctx, jobID)
		if err != nil {
			// Job might be deleted
			return nil
		}

		statusMap, ok := status.(map[string]interface{})
		if !ok || statusMap["running"].(int) == 0 {
			return nil
		}

		time.Sleep(checkInterval)
	}

	return fmt.Errorf("job %s did not stop within %v", jobID, timeout)
}

func (d *SaltNomadDeployer) verifySaltConfiguration(ctx context.Context, component orchestrator.Component) error {
	// Verify directories and files were created
	switch component.Name {
	case "consul":
		paths := []string{"/etc/consul", "/opt/consul/data"}
		for _, path := range paths {
			exists, err := d.saltClient.FileExists(ctx, path)
			if err != nil {
				return fmt.Errorf("failed to verify %s: %w", path, err)
			}
			if !exists {
				return fmt.Errorf("required path %s not found", path)
			}
		}
	case "vault":
		paths := []string{"/etc/vault", "/opt/vault/data"}
		for _, path := range paths {
			exists, err := d.saltClient.FileExists(ctx, path)
			if err != nil {
				return fmt.Errorf("failed to verify %s: %w", path, err)
			}
			if !exists {
				return fmt.Errorf("required path %s not found", path)
			}
		}
	}
	
	return nil
}

func (d *SaltNomadDeployer) verifyDeployment(ctx context.Context, component *Component, jobID string) error {
	// Verify through Nomad
	status, err := d.nomadClient.GetJobStatus(ctx, jobID)
	if err != nil {
		return fmt.Errorf("failed to get job status: %w", err)
	}

	if !d.isJobHealthy(status) {
		return fmt.Errorf("job %s is not healthy", jobID)
	}

	// Component-specific verification
	switch component.Name {
	case "consul":
		// Could check Consul API endpoint
		d.logger.Debug("Consul deployment verified via Nomad")
	case "vault":
		// Could check Vault seal status
		d.logger.Debug("Vault deployment verified via Nomad")
	}

	return nil
}

func (d *SaltNomadDeployer) rollbackSaltChanges(ctx context.Context, component *Component) error {
	stateName := fmt.Sprintf("eos.%s.remove", component.Name)
	return d.saltClient.ApplyState(ctx, stateName, nil, nil)
}

func (d *SaltNomadDeployer) previewConfigurations(ctx context.Context, component *Component) error {
	orchComponent := d.convertToOrchComponent(component)
	
	// Preview Salt states
	d.logger.Info("=== Generated Salt Configuration ===")
	states, err := d.stateGen.GenerateState(orchComponent)
	if err != nil {
		return fmt.Errorf("failed to generate states: %w", err)
	}
	fmt.Printf("Salt State:\n%v\n\n", states)

	// Preview Nomad job
	d.logger.Info("=== Generated Nomad Job ===")
	jobSpec, err := d.jobGen.GenerateJob(orchComponent)
	if err != nil {
		return fmt.Errorf("failed to generate job: %w", err)
	}
	fmt.Printf("Nomad Job:\n%v\n", jobSpec)

	return nil
}

func (d *SaltNomadDeployer) getServiceName(component *Component) string {
	switch component.Name {
	case "consul":
		return "consul"
	case "vault":
		return "vault"
	case "postgres":
		return "postgresql"
	default:
		return ""
	}
}

// Configuration mapping helpers

func (d *SaltNomadDeployer) mapConsulConfig(config map[string]interface{}) interface{} {
	consulConfig := orchestrator.ConsulConfig{
		Datacenter:      "dc1",
		BootstrapExpect: 1,
		UIEnabled:       true,
		ServerMode:      true,
	}

	if dc, ok := config["datacenter"].(string); ok {
		consulConfig.Datacenter = dc
	}
	if bootstrap, ok := config["bootstrap_expect"].(int); ok {
		consulConfig.BootstrapExpect = bootstrap
	}
	if ui, ok := config["ui_enabled"].(bool); ok {
		consulConfig.UIEnabled = ui
	}

	return consulConfig
}

func (d *SaltNomadDeployer) mapVaultConfig(config map[string]interface{}) interface{} {
	vaultConfig := orchestrator.VaultConfig{
		Backend: "consul",
		ConsulAddr: "consul.service.consul:8161",
	}

	if backend, ok := config["backend"].(string); ok {
		vaultConfig.Backend = backend
	}

	return vaultConfig
}

func (d *SaltNomadDeployer) mapPostgresConfig(config map[string]interface{}) interface{} {
	// Map database configuration for Nomad deployment
	dbConfig := map[string]interface{}{
		"image":    config["image"],
		"database": config["database"],
		"user":     config["user"],
		"password": config["password"],
	}

	if port, ok := config["port"]; ok {
		dbConfig["port"] = port
	}

	return dbConfig
}

// Validation helpers

func (d *SaltNomadDeployer) validateConsulConfig(component *Component) error {
	if component.Version == "" {
		component.Version = "1.17.0"
	}
	
	if _, ok := component.Config["datacenter"]; !ok {
		component.Config["datacenter"] = "dc1"
	}
	
	// For Nomad deployment, ensure image is set
	if _, ok := component.Config["image"]; !ok {
		component.Config["image"] = fmt.Sprintf("consul:%s", component.Version)
	}
	
	return nil
}

func (d *SaltNomadDeployer) validateVaultConfig(component *Component) error {
	if component.Version == "" {
		component.Version = "1.15.0"
	}
	
	if _, ok := component.Config["backend"]; !ok {
		component.Config["backend"] = "consul"
	}
	
	if _, ok := component.Config["image"]; !ok {
		component.Config["image"] = fmt.Sprintf("vault:%s", component.Version)
	}
	
	return nil
}

func (d *SaltNomadDeployer) validatePostgresConfig(component *Component) error {
	if component.Version == "" {
		component.Version = "15"
	}
	
	// Required fields for database
	required := []string{"database", "user", "password"}
	for _, field := range required {
		if _, ok := component.Config[field]; !ok {
			return &ValidationError{
				Component: component.Name,
				Field:     field,
				Message:   fmt.Sprintf("%s is required for database deployment", field),
			}
		}
	}
	
	if _, ok := component.Config["image"]; !ok {
		component.Config["image"] = fmt.Sprintf("postgres:%s", component.Version)
	}
	
	return nil
}