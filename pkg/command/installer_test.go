// pkg/command/installer_test.go
package command

import (
	"context"
	"testing"

	"github.com/CodeMonkeyCybersecurity/eos/pkg/eos_io"
	"github.com/stretchr/testify/assert"
)

func TestCommandInstaller_ValidateDefinition(t *testing.T) {
	tests := []struct {
		name    string
		def     *CommandDefinition
		wantErr bool
	}{
		{
			name: "valid definition",
			def: &CommandDefinition{
				Name:    "test-cmd",
				Content: "echo hello",
			},
			wantErr: false,
		},
		{
			name: "empty name",
			def: &CommandDefinition{
				Name:    "",
				Content: "echo hello",
			},
			wantErr: true,
		},
		{
			name: "empty content",
			def: &CommandDefinition{
				Name:    "test-cmd",
				Content: "",
			},
			wantErr: true,
		},
		{
			name: "invalid characters in name",
			def: &CommandDefinition{
				Name:    "test;cmd",
				Content: "echo hello",
			},
			wantErr: true,
		},
	}

	ctx := context.Background()
	rc := eos_io.NewContext(ctx, "test")
	ci := NewCommandInstaller(rc)

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			err := ci.ValidateDefinition(tt.def)
			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

func TestCommandInstaller_ValidateCommandName(t *testing.T) {
	tests := []struct {
		name    string
		cmdName string
		wantErr bool
	}{
		{
			name:    "valid name",
			cmdName: "test-cmd",
			wantErr: false,
		},
		{
			name:    "empty name",
			cmdName: "",
			wantErr: true,
		},
		{
			name:    "name with space",
			cmdName: "test cmd",
			wantErr: true,
		},
		{
			name:    "name with semicolon",
			cmdName: "test;cmd",
			wantErr: true,
		},
		{
			name:    "name with pipe",
			cmdName: "test|cmd",
			wantErr: true,
		},
	}

	ctx := context.Background()
	rc := eos_io.NewContext(ctx, "test")
	ci := NewCommandInstaller(rc)

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			err := ci.validateCommandName(tt.cmdName)
			if tt.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

func TestCommandInstaller_GenerateScript(t *testing.T) {
	ctx := context.Background()
	rc := eos_io.NewContext(ctx, "test")
	ci := NewCommandInstaller(rc)

	def := &CommandDefinition{
		Name:        "test-cmd",
		Content:     "echo hello world",
		Description: "Test command",
	}

	script := ci.GenerateScript(def)

	assert.Contains(t, script, "#!/bin/bash")
	assert.Contains(t, script, "# Test command")
	assert.Contains(t, script, "# Generated by Eos command installer")
	assert.Contains(t, script, "echo hello world")
}

func TestCommandInstaller_IsEosCommand(t *testing.T) {
	ctx := context.Background()
	rc := eos_io.NewContext(ctx, "test")
	ci := NewCommandInstaller(rc)

	// Test with a non-existent file
	result := ci.isEosCommand("/nonexistent/file")
	assert.False(t, result)
}

// Fuzz test for command name validation
func FuzzValidateCommandName(f *testing.F) {
	f.Add("test-cmd")
	f.Add("")
	f.Add("test cmd")
	f.Add("test;cmd")

	f.Fuzz(func(t *testing.T, name string) {
		ctx := context.Background()
		rc := eos_io.NewContext(ctx, "test")
		ci := NewCommandInstaller(rc)

		// Should not panic
		ci.validateCommandName(name)
	})
}
